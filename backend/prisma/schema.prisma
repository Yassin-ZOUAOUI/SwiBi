datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String?
  avatar    String?
  phone     String?
  ville     String?  // City in Tunisia
  interests String[] // Array of interests/categories
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  swipes       Swipe[]   // User's swipes on items
  contacts     Contact[] // User's matched items (right swipes)
  listedItems  Item[]    @relation("SellerItems")
  messages     Message[] // Messages sent by the user
}

model Item {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  images      String[] // Array of image URLs
  ville       String   // City in Tunisia
  category    String
  status      String   @default("ACTIVE") // ACTIVE, SOLD, DELETED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  seller    User     @relation("SellerItems", fields: [sellerId], references: [id])
  sellerId  String   @db.ObjectId
  swipes    Swipe[]
  contacts  Contact[]
}

model Swipe {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  direction String   // LEFT or RIGHT
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String   @db.ObjectId

  @@unique([userId, itemId])
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  status    String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String   @db.ObjectId
  conversation Conversation?

  @@unique([userId, itemId])
}

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contact   Contact  @relation(fields: [contactId], references: [id])
  contactId String   @db.ObjectId @unique
  messages  Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  
  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id])
  conversationId String    @db.ObjectId
  sender    User    @relation(fields: [senderId], references: [id])
  senderId  String  @db.ObjectId

  @@index([conversationId])
  @@index([senderId])
} 